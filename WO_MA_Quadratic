{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of FYP Rebuild WO CSTR",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fek17/research-project/blob/main/Copy_of_FYP_Rebuild_WO_CSTR.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "95me-dgEyB3S"
      },
      "source": [
        "**Importing Libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Ta2CdlsxOdW",
        "cellView": "form",
        "outputId": "4f63de01-895e-4595-efe9-4631867ee5c2"
      },
      "source": [
        "#@title\r\n",
        "!pip install casadi\r\n",
        "import numpy as np \r\n",
        "import matplotlib\r\n",
        "import matplotlib.pyplot as plt \r\n",
        "from scipy.optimize import minimize \r\n",
        "from mpl_toolkits.mplot3d import Axes3D\r\n",
        "from matplotlib import cm\r\n",
        "import random\r\n",
        "from scipy.optimize import minimize\r\n",
        "from scipy.optimize import fmin\r\n",
        "from functools import partial"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: casadi in /usr/local/lib/python3.6/dist-packages (3.5.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s3anESSox5Eu",
        "cellView": "form"
      },
      "source": [
        "#@title\r\n",
        "# v2 includes shaping the TR with the curvature of the problem by a broyden update on derivatives\r\n",
        "# and a BFGS update on the Hessian, however the TR becomes very small in some parts, so the approach\r\n",
        "# does not seem to be too effective.\r\n",
        "\r\n",
        "import time\r\n",
        "import random\r\n",
        "import numpy as np\r\n",
        "import numpy.random as rnd\r\n",
        "from scipy.spatial.distance import cdist\r\n",
        "from scipy.optimize import minimize\r\n",
        "from scipy.optimize import broyden1\r\n",
        "from scipy import linalg\r\n",
        "import scipy\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import functools\r\n",
        "from matplotlib.patches import Ellipse\r\n",
        "\r\n",
        "from casadi import *\r\n",
        "\r\n",
        "\r\n",
        "def Benoit_Model(u):\r\n",
        "    f = u[0] ** 2 + u[1] ** 2\r\n",
        "    return f\r\n",
        "\r\n",
        "\r\n",
        "def con1_model(u):\r\n",
        "    g1 = 1. - u[0] + u[1] ** 2\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "def Benoit_System(u):\r\n",
        "    f = u[0] ** 2 + u[1] ** 2 + u[0] * u[1] + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return f\r\n",
        "\r\n",
        "\r\n",
        "def con1_system(u):\r\n",
        "    g1 = 1. - u[0] + u[1] ** 2 + 2. * u[1] - 2. + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "def con1_system_tight(u):\r\n",
        "    g1 = 1. - u[0] + u[1] ** 2 + 2. * u[1] + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "def Benoit_System_noiseless(u):\r\n",
        "    f = u[0] ** 2 + u[1] ** 2 + u[0] * u[1]  # + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return f\r\n",
        "\r\n",
        "\r\n",
        "def con1_system_noiseless(u):\r\n",
        "    g1 = 1. - u[0] + u[1] ** 2 + 2. * u[1] - 2.  # + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "def con1_system_tight_noiseless(u):\r\n",
        "    g1 = 1. - u[0] + u[1] ** 2 + 2. * u[1]  # + np.random.normal(0., np.sqrt(1e-3))\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "class WO_system:\r\n",
        "    # Parameters\r\n",
        "    Fa = 1.8275\r\n",
        "    Mt = 2105.2\r\n",
        "    # kinetic parameters\r\n",
        "    phi1 = - 3.\r\n",
        "    psi1 = -17.\r\n",
        "    phi2 = - 4.\r\n",
        "    psi2 = -29.\r\n",
        "    # Reference temperature\r\n",
        "    Tref = 110. + 273.15  # [=] K.\r\n",
        "\r\n",
        "    def __init__(self):\r\n",
        "        self.xd, self.xa, self.u, self.ODEeq, self.Aeq, self.states, self.algebraics, self.inputs = self.DAE_system()\r\n",
        "        self.eval = self.integrator_system()\r\n",
        "\r\n",
        "    def DAE_system(self):\r\n",
        "        # Define vectors with names of states\r\n",
        "        states = ['x']\r\n",
        "        nd = len(states)\r\n",
        "        xd = SX.sym('xd', nd)\r\n",
        "        for i in range(nd):\r\n",
        "            globals()[states[i]] = xd[i]\r\n",
        "\r\n",
        "        # Define vectors with names of algebraic variables\r\n",
        "        algebraics = ['Xa', 'Xb', 'Xc', 'Xe', 'Xp', 'Xg']\r\n",
        "        na = len(algebraics)\r\n",
        "        xa = SX.sym('xa', na)\r\n",
        "        for i in range(na):\r\n",
        "            globals()[algebraics[i]] = xa[i]\r\n",
        "\r\n",
        "        inputs = ['Fb', 'Tr']\r\n",
        "        nu = len(inputs)\r\n",
        "        u = SX.sym(\"u\", nu)\r\n",
        "        for i in range(nu):\r\n",
        "            globals()[inputs[i]] = u[i]\r\n",
        "\r\n",
        "        # Reparametrization\r\n",
        "        k1 = 1.6599e6 * np.exp(-6666.7 / (Tr + 273.15))\r\n",
        "        k2 = 7.2117e8 * np.exp(-8333.3 / (Tr + 273.15))\r\n",
        "        k3 = 2.6745e12 * np.exp(-11111. / (Tr + 273.15))\r\n",
        "\r\n",
        "        # reaction rate\r\n",
        "        Fr = Fa + Fb\r\n",
        "        r1 = k1 * Xa * Xb * Mt\r\n",
        "        r2 = k2 * Xb * Xc * Mt\r\n",
        "        r3 = k3 * Xc * Xp * Mt\r\n",
        "\r\n",
        "        # residual for x\r\n",
        "        x_res = np.zeros((6, 1))\r\n",
        "        x_res[0, 0] = (Fa - r1 - Fr * Xa) / Mt\r\n",
        "        x_res[1, 0] = (Fb - r1 - r2 - Fr * Xb) / Mt\r\n",
        "        x_res[2, 0] = (+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt\r\n",
        "        x_res[3, 0] = (+ 2 * r2 - Fr * Xe) / Mt\r\n",
        "        x_res[4, 0] = (+   r2 - 0.5 * r3 - Fr * Xp) / Mt\r\n",
        "        x_res[5, 0] = (+ 1.5 * r3 - Fr * Xg) / Mt\r\n",
        "        # Define vectors with banes of input variables\r\n",
        "\r\n",
        "        ODEeq = [0 * x]\r\n",
        "\r\n",
        "        # Declare algebraic equations\r\n",
        "        Aeq = []\r\n",
        "\r\n",
        "        Aeq += [(Fa - r1 - Fr * Xa) / Mt]\r\n",
        "        Aeq += [(Fb - r1 - r2 - Fr * Xb) / Mt]\r\n",
        "        Aeq += [(+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt]\r\n",
        "        Aeq += [(+ 2 * r2 - Fr * Xe) / Mt]\r\n",
        "        Aeq += [(+   r2 - 0.5 * r3 - Fr * Xp) / Mt]\r\n",
        "        Aeq += [(+ 1.5 * r3 - Fr * Xg) / Mt]\r\n",
        "\r\n",
        "        return xd, xa, u, ODEeq, Aeq, states, algebraics, inputs\r\n",
        "\r\n",
        "    def integrator_system(self):\r\n",
        "        \"\"\"\r\n",
        "        This function constructs the integrator to be suitable with casadi environment, for the equations of the model\r\n",
        "        and the objective function with variable time step.\r\n",
        "        inputs: NaN\r\n",
        "        outputs: F: Function([x, u, dt]--> [xf, obj])\r\n",
        "        \"\"\"\r\n",
        "\r\n",
        "        xd, xa, u, ODEeq, Aeq, states, algebraics, inputs = self.DAE_system()\r\n",
        "        VV = Function('vfcn', [xa, u], [vertcat(*Aeq)], ['w0', 'u'], ['w'])\r\n",
        "        solver = rootfinder('solver', 'newton', VV)\r\n",
        "\r\n",
        "        return solver\r\n",
        "\r\n",
        "    def WO_obj_sys_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        Fb = u[0]\r\n",
        "        Tr = u[1]\r\n",
        "        Fa = 1.8275\r\n",
        "        Fr = Fa + Fb\r\n",
        "\r\n",
        "        obj = -(1043.38 * x[4] * Fr +\r\n",
        "                20.92 * x[3] * Fr -\r\n",
        "                79.23 * Fa -\r\n",
        "                118.34 * Fb) + 0.5 * np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return obj\r\n",
        "\r\n",
        "    def WO_obj_sys_ca_noise_less(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        Fb = u[0]\r\n",
        "        Tr = u[1]\r\n",
        "        Fa = 1.8275\r\n",
        "        Fr = Fa + Fb\r\n",
        "\r\n",
        "        obj = -(1043.38 * x[4] * Fr +\r\n",
        "                20.92 * x[3] * Fr -\r\n",
        "                79.23 * Fa -\r\n",
        "                118.34 * Fb)  # + 0.5*np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return obj\r\n",
        "\r\n",
        "    def WO_con1_sys_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon1 = x[0] - 0.12 + 5e-4 * np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return -pcon1.toarray()[0]\r\n",
        "\r\n",
        "    def WO_con2_sys_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon2 = x[5] - 0.08 + 5e-4 * np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return -pcon2.toarray()[0]\r\n",
        "\r\n",
        "    def WO_con1_sys_ca_noise_less(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon1 = x[0] - 0.12  # + 5e-4*np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return -pcon1.toarray()[0]\r\n",
        "\r\n",
        "    def WO_con2_sys_ca_noise_less(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.0260265, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon2 = x[5] - 0.08  # + 5e-4*np.random.normal(0., 1)\r\n",
        "\r\n",
        "        return -pcon2.toarray()[0]\r\n",
        "\r\n",
        "\r\n",
        "class WO_model:\r\n",
        "    # Parameters\r\n",
        "    Fa = 1.8275\r\n",
        "    Mt = 2105.2\r\n",
        "    # kinetic parameters\r\n",
        "    phi1 = - 3.\r\n",
        "    psi1 = -17.\r\n",
        "    phi2 = - 4.\r\n",
        "    psi2 = -29.\r\n",
        "    # Reference temperature\r\n",
        "    Tref = 110. + 273.15  # [=] K.\r\n",
        "\r\n",
        "    def __init__(self):\r\n",
        "        self.xd, self.xa, self.u, self.ODEeq, self.Aeq, self.states, self.algebraics, self.inputs = self.DAE_model()\r\n",
        "        self.eval = self.integrator_model()\r\n",
        "\r\n",
        "    def DAE_model(self):\r\n",
        "        # Define vectors with names of states\r\n",
        "        states = ['x']\r\n",
        "        nd = len(states)\r\n",
        "        xd = SX.sym('xd', nd)\r\n",
        "        for i in range(nd):\r\n",
        "            globals()[states[i]] = xd[i]\r\n",
        "\r\n",
        "        # Define vectors with names of algebraic variables\r\n",
        "        algebraics = ['Xa', 'Xb', 'Xe', 'Xp', 'Xg']\r\n",
        "        na = len(algebraics)\r\n",
        "        xa = SX.sym('xa', na)\r\n",
        "        for i in range(na):\r\n",
        "            globals()[algebraics[i]] = xa[i]\r\n",
        "\r\n",
        "        # Define vectors with banes of input variables\r\n",
        "        inputs = ['Fb', 'Tr']\r\n",
        "        nu = len(inputs)\r\n",
        "        u = SX.sym(\"u\", nu)\r\n",
        "        for i in range(nu):\r\n",
        "            globals()[inputs[i]] = u[i]\r\n",
        "\r\n",
        "        k1 = np.exp(phi1) * np.exp((Tref / (Tr + 273.15) - 1) * psi1)\r\n",
        "        k2 = np.exp(phi2) * np.exp((Tref / (Tr + 273.15) - 1) * psi2)\r\n",
        "\r\n",
        "        # reaction rate\r\n",
        "        Fr = Fa + Fb\r\n",
        "        r1 = k1 * Xa * Xb * Xb * Mt\r\n",
        "        r2 = k2 * Xa * Xb * Xp * Mt\r\n",
        "        ODEeq = [0 * x]\r\n",
        "\r\n",
        "        # Declare algebraic equations\r\n",
        "        Aeq = []\r\n",
        "\r\n",
        "        Aeq += [Fa - r1 - r2 - Fr * Xa]\r\n",
        "        Aeq += [Fb - 2 * r1 - r2 - Fr * Xb]\r\n",
        "        Aeq += [+ 2 * r1 - Fr * Xe]\r\n",
        "        Aeq += [+   r1 - r2 - Fr * Xp]\r\n",
        "        Aeq += [+ 3 * r2 - Fr * Xg]\r\n",
        "\r\n",
        "        return xd, xa, u, ODEeq, Aeq, states, algebraics, inputs\r\n",
        "\r\n",
        "    def integrator_model(self):\r\n",
        "        \"\"\"\r\n",
        "        This function constructs the integrator to be suitable with casadi environment, for the equations of the model\r\n",
        "        and the objective function with variable time step.\r\n",
        "        inputs: NaN\r\n",
        "        outputs: F: Function([x, u, dt]--> [xf, obj])\r\n",
        "        \"\"\"\r\n",
        "\r\n",
        "        xd, xa, u, ODEeq, Aeq, states, algebraics, inputs = self.DAE_model()\r\n",
        "        VV = Function('vfcn', [xa, u], [vertcat(*Aeq)], ['w0', 'u'], ['w'])\r\n",
        "        solver = rootfinder('solver', 'newton', VV)\r\n",
        "\r\n",
        "        # model = functools.partial(solver, np.zeros(np.shape(xa)))\r\n",
        "        return solver\r\n",
        "\r\n",
        "    def WO_obj_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        Fb = u[0]\r\n",
        "        Tr = u[1]\r\n",
        "        Fa = 1.8275\r\n",
        "        Fr = Fa + Fb\r\n",
        "\r\n",
        "        obj = -(1043.38 * x[3] * Fr +\r\n",
        "                20.92 * x[2] * Fr -\r\n",
        "                79.23 * Fa -\r\n",
        "                118.34 * Fb)\r\n",
        "\r\n",
        "        return obj\r\n",
        "\r\n",
        "    def WO_con1_model_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon1 = x[0] - 0.12  # + 5e-4*np.random.normal(1., 1)\r\n",
        "        return -pcon1.toarray()[0]\r\n",
        "\r\n",
        "    def WO_con2_model_ca(self, u):\r\n",
        "        x = self.eval(np.array([0.114805, 0.525604, 0.207296, 0.0923376, 0.0339309]), u)\r\n",
        "        pcon2 = x[4] - 0.08  # + 5e-4*np.random.normal(1., 1)\r\n",
        "        return -pcon2.toarray()[0]\r\n",
        "\r\n",
        "\r\n",
        "def con_empty(u):\r\n",
        "    g1 = 0.\r\n",
        "    return -g1\r\n",
        "\r\n",
        "\r\n",
        "def obj_empty(u):\r\n",
        "    f = 0.\r\n",
        "    return f\r\n",
        "\r\n",
        "\r\n",
        "#\r\n",
        "# def DAE_model():\r\n",
        "#     # Parameters\r\n",
        "#     Fa = 1.8275\r\n",
        "#     Mt = 2105.2\r\n",
        "#     # kinetic parameters\r\n",
        "#     phi1 = - 3.\r\n",
        "#     psi1 = -17.\r\n",
        "#     phi2 = - 4.\r\n",
        "#     psi2 = -29.\r\n",
        "#     # Reference temperature\r\n",
        "#     Tref = 110. + 273.15  # [=] K.\r\n",
        "#     # Define vectors with names of states\r\n",
        "#     states = ['x']\r\n",
        "#     nd = len(states)\r\n",
        "#     xd = SX.sym('xd', nd)\r\n",
        "#     for i in range(nd):\r\n",
        "#         globals()[states[i]] = xd[i]\r\n",
        "#\r\n",
        "#     # Define vectors with names of algebraic variables\r\n",
        "#     algebraics = ['Xa', 'Xb', 'Xe', 'Xp', 'Xg']\r\n",
        "#     na = len(algebraics)\r\n",
        "#     xa = SX.sym('xa', na)\r\n",
        "#     for i in range(na):\r\n",
        "#         globals()[algebraics[i]] = xa[i]\r\n",
        "#\r\n",
        "#     # Define vectors with banes of input variables\r\n",
        "#     inputs = ['Fb', 'Tr']\r\n",
        "#     nu = len(inputs)\r\n",
        "#     u = SX.sym(\"u\", nu)\r\n",
        "#     for i in range(nu):\r\n",
        "#         globals()[inputs[i]] = u[i]\r\n",
        "#\r\n",
        "#     k1 = np.exp(phi1) * np.exp((Tref / (Tr + 273.15) - 1) * psi1)\r\n",
        "#     k2 = np.exp(phi2) * np.exp((Tref / (Tr + 273.15) - 1) * psi2)\r\n",
        "#\r\n",
        "#     # reaction rate\r\n",
        "#     Fr = Fa + Fb\r\n",
        "#     r1 = k1 * Xa * Xb * Xb * Mt\r\n",
        "#     r2 = k2 * Xa * Xb * Xp * Mt\r\n",
        "#     ODEeq = [0 * x]\r\n",
        "#\r\n",
        "#     # Declare algebraic equations\r\n",
        "#     Aeq = []\r\n",
        "#\r\n",
        "#     Aeq += [Fa - r1 - r2 - Fr * Xa]\r\n",
        "#     Aeq += [Fb - 2 * r1 - r2 - Fr * Xb]\r\n",
        "#     Aeq += [+ 2 * r1 - Fr * Xe]\r\n",
        "#     Aeq += [+   r1 - r2 - Fr * Xp]\r\n",
        "#     Aeq += [+ 3 * r2 - Fr * Xg]\r\n",
        "#\r\n",
        "#     return xd, xa, u, ODEeq, Aeq, states, algebraics, inputs\r\n",
        "#\r\n",
        "#\r\n",
        "# def integrator_model():\r\n",
        "#     \"\"\"\r\n",
        "#     This function constructs the integrator to be suitable with casadi environment, for the equations of the model\r\n",
        "#     and the objective function with variable time step.\r\n",
        "#     inputs: NaN\r\n",
        "#     outputs: F: Function([x, u, dt]--> [xf, obj])\r\n",
        "#     \"\"\"\r\n",
        "#\r\n",
        "#     xd, xa, u, ODEeq, Aeq, states, algebraics, inputs = DAE_model()\r\n",
        "#     VV = Function('vfcn', [xa, u], [vertcat(*Aeq)], ['w0', 'u'], ['w'])\r\n",
        "#     solver = rootfinder('solver', 'newton', VV)\r\n",
        "#\r\n",
        "#     # model = functools.partial(solver, np.zeros(np.shape(xa)))\r\n",
        "#     return solver\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_obj_ca(u):\r\n",
        "#     solver = integrator_model()\r\n",
        "#     x = solver(np.zeros(5), u)\r\n",
        "#     Fb = u[0]\r\n",
        "#     Tr = u[1]\r\n",
        "#     Fa = 1.8275\r\n",
        "#     Fr = Fa + Fb\r\n",
        "#\r\n",
        "#     obj = -(1043.38 * x[3] * Fr +\r\n",
        "#             20.92 * x[2] * Fr -\r\n",
        "#             79.23 * Fa -\r\n",
        "#             118.34 * Fb)\r\n",
        "#\r\n",
        "#     return obj\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_con1_model_ca(u):\r\n",
        "#     solver = integrator_model()\r\n",
        "#     x = solver(np.zeros(5), u)\r\n",
        "#     pcon1 = x[0] - 0.12  # + 5e-4*np.random.normal(1., 1)\r\n",
        "#     return -pcon1.toarray()[0]\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_con2_model_ca(u):\r\n",
        "#     solver = integrator_model()\r\n",
        "#     x = solver(np.zeros(5), u)\r\n",
        "#     pcon2 = x[4] - 0.08  # + 5e-4*np.random.normal(1., 1)\r\n",
        "#     return -pcon2.toarray()[0]\r\n",
        "#\r\n",
        "#     # Parameters\r\n",
        "#\r\n",
        "#\r\n",
        "#\r\n",
        "#\r\n",
        "# def DAE_system():\r\n",
        "#     Fa = 1.8275\r\n",
        "#     Mt = 2105.2\r\n",
        "#     # kinetic parameters\r\n",
        "#     phi1 = - 3.\r\n",
        "#     psi1 = -17.\r\n",
        "#     phi2 = - 4.\r\n",
        "#     psi2 = -29.\r\n",
        "#     # Reference temperature\r\n",
        "#     Tref = 110. + 273.15  # [=] K.\r\n",
        "#\r\n",
        "#     # Define vectors with names of states\r\n",
        "#     states = ['x']\r\n",
        "#     nd = len(states)\r\n",
        "#     xd = SX.sym('xd', nd)\r\n",
        "#     for i in range(nd):\r\n",
        "#         globals()[states[i]] = xd[i]\r\n",
        "#\r\n",
        "#     # Define vectors with names of algebraic variables\r\n",
        "#     algebraics = ['Xa', 'Xb', 'Xc', 'Xe', 'Xp', 'Xg']\r\n",
        "#     na = len(algebraics)\r\n",
        "#     xa = SX.sym('xa', na)\r\n",
        "#     for i in range(na):\r\n",
        "#         globals()[algebraics[i]] = xa[i]\r\n",
        "#\r\n",
        "#     inputs = ['Fb', 'Tr']\r\n",
        "#     nu = len(inputs)\r\n",
        "#     u = SX.sym(\"u\", nu)\r\n",
        "#     for i in range(nu):\r\n",
        "#         globals()[inputs[i]] = u[i]\r\n",
        "#\r\n",
        "#     # Reparametrization\r\n",
        "#     k1 = 1.6599e6 * np.exp(-6666.7 / (Tr + 273.15))\r\n",
        "#     k2 = 7.2117e8 * np.exp(-8333.3 / (Tr + 273.15))\r\n",
        "#     k3 = 2.6745e12 * np.exp(-11111. / (Tr + 273.15))\r\n",
        "#\r\n",
        "#     # reaction rate\r\n",
        "#     Fr = Fa + Fb\r\n",
        "#     r1 = k1 * Xa * Xb * Mt\r\n",
        "#     r2 = k2 * Xb * Xc * Mt\r\n",
        "#     r3 = k3 * Xc * Xp * Mt\r\n",
        "#\r\n",
        "#     # residual for x\r\n",
        "#     x_res = np.zeros((6, 1))\r\n",
        "#     x_res[0, 0] = (Fa - r1 - Fr * Xa) / Mt\r\n",
        "#     x_res[1, 0] = (Fb - r1 - r2 - Fr * Xb) / Mt\r\n",
        "#     x_res[2, 0] = (+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt\r\n",
        "#     x_res[3, 0] = (+ 2 * r2 - Fr * Xe) / Mt\r\n",
        "#     x_res[4, 0] = (+   r2 - 0.5 * r3 - Fr * Xp) / Mt\r\n",
        "#     x_res[5, 0] = (+ 1.5 * r3 - Fr * Xg) / Mt\r\n",
        "#     # Define vectors with banes of input variables\r\n",
        "#\r\n",
        "#     ODEeq = [0 * x]\r\n",
        "#\r\n",
        "#     # Declare algebraic equations\r\n",
        "#     Aeq = []\r\n",
        "#\r\n",
        "#     Aeq += [(Fa - r1 - Fr * Xa) / Mt]\r\n",
        "#     Aeq += [(Fb - r1 - r2 - Fr * Xb) / Mt]\r\n",
        "#     Aeq += [(+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt]\r\n",
        "#     Aeq += [(+ 2 * r2 - Fr * Xe) / Mt]\r\n",
        "#     Aeq += [(+   r2 - 0.5 * r3 - Fr * Xp) / Mt]\r\n",
        "#     Aeq += [(+ 1.5 * r3 - Fr * Xg) / Mt]\r\n",
        "#\r\n",
        "#     return xd, xa, u, ODEeq, Aeq, states, algebraics, inputs\r\n",
        "#\r\n",
        "#\r\n",
        "# def integrator_system():\r\n",
        "#     \"\"\"\r\n",
        "#     This function constructs the integrator to be suitable with casadi environment, for the equations of the model\r\n",
        "#     and the objective function with variable time step.\r\n",
        "#     inputs: NaN\r\n",
        "#     outputs: F: Function([x, u, dt]--> [xf, obj])\r\n",
        "#     \"\"\"\r\n",
        "#\r\n",
        "#     xd, xa, u, ODEeq, Aeq, states, algebraics, inputs = DAE_system()\r\n",
        "#     VV = Function('vfcn', [xa, u], [vertcat(*Aeq)], ['w0', 'u'], ['w'])\r\n",
        "#     solver = rootfinder('solver', 'newton', VV)\r\n",
        "#\r\n",
        "#     return solver\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_obj_sys_ca(u):\r\n",
        "#     solver = integrator_system()\r\n",
        "#     x = solver(np.zeros(6), u)\r\n",
        "#     Fb = u[0]\r\n",
        "#     Tr = u[1]\r\n",
        "#     Fa = 1.8275\r\n",
        "#     Fr = Fa + Fb\r\n",
        "#\r\n",
        "#     obj = -(1043.38 * x[4] * Fr +\r\n",
        "#             20.92 * x[3] * Fr -\r\n",
        "#             79.23 * Fa -\r\n",
        "#             118.34 * Fb)\r\n",
        "#\r\n",
        "#     return obj\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_con1_sys_ca(u):\r\n",
        "#     solver = integrator_system()\r\n",
        "#     x = solver(np.zeros(6), u)\r\n",
        "#     pcon1 = x[0] - 0.12  # + 5e-4*np.random.normal(1., 1)\r\n",
        "#\r\n",
        "#     return -pcon1\r\n",
        "#\r\n",
        "#\r\n",
        "# def WO_con2_sys_ca(u):\r\n",
        "#     solver = integrator_system()\r\n",
        "#     x = solver(np.zeros(6), u)\r\n",
        "#     pcon2 = x[5] - 0.08  # + 5e-4*np.random.normal(1., 1)\r\n",
        "#\r\n",
        "#     return -pcon2\r\n",
        "#\r\n",
        "options = {'disp': False, 'maxiter': 10000}  # solver options\r\n",
        "# Parameters\r\n",
        "Fa = 1.8275\r\n",
        "Mt = 2105.2\r\n",
        "# kinetic parameters\r\n",
        "phi1 = - 3.\r\n",
        "psi1 = -17.\r\n",
        "phi2 = - 4.\r\n",
        "psi2 = -29.\r\n",
        "# Reference temperature\r\n",
        "Tref = 110. + 273.15  # [=] K.\r\n",
        "\r\n",
        "\r\n",
        "# --- residual function for model opt --- #\r\n",
        "def WO_nonlinear_f_model_opt(x, u_):\r\n",
        "    Fb = u_[0]\r\n",
        "    Tr = u_[1]\r\n",
        "\r\n",
        "    # states of the system\r\n",
        "    Xa = x[0]  # Mass fraction\r\n",
        "    Xb = x[1]  # Mass fraction\r\n",
        "    Xe = x[2]  # Mass fraction\r\n",
        "    Xp = x[3]  # Mass fraction\r\n",
        "    Xg = x[4]  # Mass fraction\r\n",
        "\r\n",
        "    # Reparametrization\r\n",
        "    k1 = np.exp(phi1) * np.exp((Tref / (Tr + 273.15) - 1) * psi1)\r\n",
        "    k2 = np.exp(phi2) * np.exp((Tref / (Tr + 273.15) - 1) * psi2)\r\n",
        "\r\n",
        "    # reaction rate\r\n",
        "    Fr = Fa + Fb\r\n",
        "    r1 = k1 * Xa * Xb * Xb * Mt\r\n",
        "    r2 = k2 * Xa * Xb * Xp * Mt\r\n",
        "\r\n",
        "    # residual for x\r\n",
        "    x_res = np.zeros((5, 1))\r\n",
        "    x_res[0, 0] = Fa - r1 - r2 - Fr * Xa\r\n",
        "    x_res[1, 0] = Fb - 2 * r1 - r2 - Fr * Xb\r\n",
        "    x_res[2, 0] = + 2 * r1 - Fr * Xe\r\n",
        "    x_res[3, 0] = +   r1 - r2 - Fr * Xp\r\n",
        "    x_res[4, 0] = + 3 * r2 - Fr * Xg\r\n",
        "\r\n",
        "    return np.sum(x_res ** 2)\r\n",
        "\r\n",
        "\r\n",
        "# --- residual function for model --- #\r\n",
        "def WO_nonlinear_f_model(u_, x):\r\n",
        "    Fb = u_[0]\r\n",
        "    Tr = u_[1]\r\n",
        "\r\n",
        "    # states of the system\r\n",
        "    Xa = x[0]  # Mass fraction\r\n",
        "    Xb = x[1]  # Mass fraction\r\n",
        "    Xe = x[2]  # Mass fraction\r\n",
        "    Xp = x[3]  # Mass fraction\r\n",
        "    Xg = x[4]  # Mass fraction\r\n",
        "\r\n",
        "    # Reparametrization\r\n",
        "    k1 = np.exp(phi1) * np.exp((Tref / (Tr + 273.15) - 1) * psi1)\r\n",
        "    k2 = np.exp(phi2) * np.exp((Tref / (Tr + 273.15) - 1) * psi2)\r\n",
        "\r\n",
        "    # reaction rate\r\n",
        "    Fr = Fa + Fb\r\n",
        "    r1 = k1 * Xa * Xb * Xb * Mt\r\n",
        "    r2 = k2 * Xa * Xb * Xp * Mt\r\n",
        "\r\n",
        "    # residual for x\r\n",
        "    x_res = np.zeros((5, 1))\r\n",
        "    x_res[0, 0] = Fa - r1 - r2 - Fr * Xa\r\n",
        "    x_res[1, 0] = Fb - 2 * r1 - r2 - Fr * Xb\r\n",
        "    x_res[2, 0] = + 2 * r1 - Fr * Xe\r\n",
        "    x_res[3, 0] = +   r1 - r2 - Fr * Xp\r\n",
        "    x_res[4, 0] = + 3 * r2 - Fr * Xg\r\n",
        "\r\n",
        "    return x_res\r\n",
        "\r\n",
        "\r\n",
        "# --- WO model objective --- #\r\n",
        "def WO_Model_obj(u):\r\n",
        "    x_guess = np.ones((5, 1)) * 0.2\r\n",
        "    WO_f_model = functools.partial(WO_nonlinear_f_model, u)\r\n",
        "    x_solved = broyden1(WO_f_model, x_guess, f_tol=1e-12)\r\n",
        "\r\n",
        "    # definitions\r\n",
        "    Fa = 1.8275\r\n",
        "    Fb = u[0]\r\n",
        "    Fr = Fa + Fb\r\n",
        "\r\n",
        "    # calculating objective\r\n",
        "    obj = -(1043.38 * x_solved[3, 0] * Fr +\r\n",
        "            20.92 * x_solved[2, 0] * Fr -\r\n",
        "            79.23 * Fa -\r\n",
        "            118.34 * Fb)\r\n",
        "\r\n",
        "    return obj\r\n",
        "\r\n",
        "\r\n",
        "# --- WO model con1 --- #\r\n",
        "def WO_Model_con1(u):\r\n",
        "    x_guess = np.ones((5, 1)) * 0.2\r\n",
        "    WO_f_model = functools.partial(WO_nonlinear_f_model, u)\r\n",
        "    x_solved = broyden1(WO_f_model, x_guess, f_tol=1e-12)\r\n",
        "\r\n",
        "    # calculating con1\r\n",
        "    con1 = x_solved[0, 0] - 0.12\r\n",
        "\r\n",
        "    return -con1\r\n",
        "\r\n",
        "\r\n",
        "# --- WO model con1 opt --- #\r\n",
        "def WO_Model_con1_opt(u):\r\n",
        "    x_guess = np.ones((5, 1)) * 0.2\r\n",
        "\r\n",
        "    res = minimize(WO_nonlinear_f_model_opt, x_guess, args=(u),\r\n",
        "                   method='BFGS', options=options, tol=1e-12)\r\n",
        "    x_solved = res.x\r\n",
        "\r\n",
        "    # calculating con1\r\n",
        "    con1 = x_solved[0] - 0.12\r\n",
        "\r\n",
        "    return -con1\r\n",
        "\r\n",
        "\r\n",
        "# --- WO model con2 --- #\r\n",
        "def WO_Model_con2(u):\r\n",
        "    x_guess = np.ones((5, 1)) * 0.2\r\n",
        "    WO_f_model = functools.partial(WO_nonlinear_f_model, u)\r\n",
        "    x_solved = broyden1(WO_f_model, x_guess, f_tol=1e-12)\r\n",
        "\r\n",
        "    # calculating con1\r\n",
        "    con2 = x_solved[4, 0] - 0.08\r\n",
        "\r\n",
        "    return -con2\r\n",
        "\r\n",
        "\r\n",
        "# --- WO model con2 opt --- #\r\n",
        "def WO_Model_con2_opt(u):\r\n",
        "    x_guess = np.ones((5, 1)) * 0.2\r\n",
        "    res = minimize(WO_nonlinear_f_model_opt, x_guess, args=(u),\r\n",
        "                   method='BFGS', options=options, tol=1e-12)\r\n",
        "    x_solved = res.x\r\n",
        "\r\n",
        "    # calculating con1\r\n",
        "    con2 = x_solved[4] - 0.08\r\n",
        "\r\n",
        "    return -con2\r\n",
        "    # Parameters\r\n",
        "\r\n",
        "\r\n",
        "Fa = 1.8275\r\n",
        "Mt = 2105.2\r\n",
        "# kinetic parameters\r\n",
        "phi1 = - 3.\r\n",
        "psi1 = -17.\r\n",
        "phi2 = - 4.\r\n",
        "psi2 = -29.\r\n",
        "# Reference temperature\r\n",
        "Tref = 110. + 273.15  # [=] K.\r\n",
        "\r\n",
        "\r\n",
        "def DAE_system():\r\n",
        "    # Define vectors with names of states\r\n",
        "    states = ['x']\r\n",
        "    nd = len(states)\r\n",
        "    xd = SX.sym('xd', nd)\r\n",
        "    for i in range(nd):\r\n",
        "        globals()[states[i]] = xd[i]\r\n",
        "\r\n",
        "    # Define vectors with names of algebraic variables\r\n",
        "    algebraics = ['Xa', 'Xb', 'Xc', 'Xe', 'Xp', 'Xg']\r\n",
        "    na = len(algebraics)\r\n",
        "    xa = SX.sym('xa', na)\r\n",
        "    for i in range(na):\r\n",
        "        globals()[algebraics[i]] = xa[i]\r\n",
        "\r\n",
        "    inputs = ['Fb', 'Tr']\r\n",
        "    nu = len(inputs)\r\n",
        "    u = SX.sym(\"u\", nu)\r\n",
        "    for i in range(nu):\r\n",
        "        globals()[inputs[i]] = u[i]\r\n",
        "\r\n",
        "    # Reparametrization\r\n",
        "    k1 = 1.6599e6 * np.exp(-6666.7 / (Tr + 273.15))\r\n",
        "    k2 = 7.2117e8 * np.exp(-8333.3 / (Tr + 273.15))\r\n",
        "    k3 = 2.6745e12 * np.exp(-11111. / (Tr + 273.15))\r\n",
        "\r\n",
        "    # reaction rate\r\n",
        "    Fr = Fa + Fb\r\n",
        "    r1 = k1 * Xa * Xb * Mt\r\n",
        "    r2 = k2 * Xb * Xc * Mt\r\n",
        "    r3 = k3 * Xc * Xp * Mt\r\n",
        "\r\n",
        "    # residual for x\r\n",
        "    x_res = np.zeros((6, 1))\r\n",
        "    x_res[0, 0] = (Fa - r1 - Fr * Xa) / Mt\r\n",
        "    x_res[1, 0] = (Fb - r1 - r2 - Fr * Xb) / Mt\r\n",
        "    x_res[2, 0] = (+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt\r\n",
        "    x_res[3, 0] = (+ 2 * r2 - Fr * Xe) / Mt\r\n",
        "    x_res[4, 0] = (+   r2 - 0.5 * r3 - Fr * Xp) / Mt\r\n",
        "    x_res[5, 0] = (+ 1.5 * r3 - Fr * Xg) / Mt\r\n",
        "    # Define vectors with banes of input variables\r\n",
        "\r\n",
        "    ODEeq = [0 * x]\r\n",
        "\r\n",
        "    # Declare algebraic equations\r\n",
        "    Aeq = []\r\n",
        "\r\n",
        "    Aeq += [(Fa - r1 - Fr * Xa) / Mt]\r\n",
        "    Aeq += [(Fb - r1 - r2 - Fr * Xb) / Mt]\r\n",
        "    Aeq += [(+ 2 * r1 - 2 * r2 - r3 - Fr * Xc) / Mt]\r\n",
        "    Aeq += [(+ 2 * r2 - Fr * Xe) / Mt]\r\n",
        "    Aeq += [(+   r2 - 0.5 * r3 - Fr * Xp) / Mt]\r\n",
        "    Aeq += [(+ 1.5 * r3 - Fr * Xg) / Mt]\r\n",
        "\r\n",
        "    return xd, xa, u, ODEeq, Aeq, states, algebraics, inputs\r\n",
        "\r\n",
        "\r\n",
        "def integrator_system():\r\n",
        "    \"\"\"\r\n",
        "    This function constructs the integrator to be suitable with casadi environment, for the equations of the model\r\n",
        "    and the objective function with variable time step.\r\n",
        "    inputs: NaN\r\n",
        "    outputs: F: Function([x, u, dt]--> [xf, obj])\r\n",
        "    \"\"\"\r\n",
        "\r\n",
        "    xd, xa, u, ODEeq, Aeq, states, algebraics, inputs = DAE_system()\r\n",
        "    VV = Function('vfcn', [xa, u], [vertcat(*Aeq)], ['w0', 'u'], ['w'])\r\n",
        "    solver = rootfinder('solver', 'newton', VV)\r\n",
        "\r\n",
        "    return solver\r\n",
        "\r\n",
        "\r\n",
        "def WO_obj_sys_ca(u):\r\n",
        "    solver = integrator_system()\r\n",
        "    x = solver(np.zeros(6), u)\r\n",
        "    Fb = u[0]\r\n",
        "    Tr = u[1]\r\n",
        "    Fa = 1.8275\r\n",
        "    Fr = Fa + Fb\r\n",
        "\r\n",
        "    obj = -(1043.38 * x[4] * Fr +\r\n",
        "            20.92 * x[3] * Fr -\r\n",
        "            79.23 * Fa -\r\n",
        "            118.34 * Fb)\r\n",
        "\r\n",
        "    return obj\r\n",
        "\r\n",
        "\r\n",
        "def WO_con1_sys_ca(u):\r\n",
        "    solver = integrator_system()\r\n",
        "    x = solver(np.zeros(6), u)\r\n",
        "    pcon1 = x[0] - 0.12  # + 5e-4*np.random.normal(1., 1)\r\n",
        "\r\n",
        "    return -pcon1.toarray()[0]\r\n",
        "\r\n",
        "\r\n",
        "def WO_con2_sys_ca(u):\r\n",
        "    solver = integrator_system()\r\n",
        "    x = solver(np.zeros(6), u)\r\n",
        "    pcon2 = x[5] - 0.08  # + 5e-4*np.random.normal(1., 1)\r\n",
        "\r\n",
        "    return -pcon2.toarray()[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQSHgcMgx-NJ",
        "cellView": "form"
      },
      "source": [
        "#@title\r\n",
        "#SOBOL sequencing from https://people.sc.fsu.edu/~jburkardt/py_src/sobol/sobol.py\r\n",
        "from numpy import *\r\n",
        "def i4_sobol_generate ( m, n, skip ):\r\n",
        "\r\n",
        "#*****************************************************************************80\r\n",
        "#\r\n",
        "## I4_SOBOL_GENERATE generates a Sobol dataset.\r\n",
        "#\r\n",
        "#  Licensing:\r\n",
        "#\r\n",
        "#    This code is distributed under the MIT license.\r\n",
        "#\r\n",
        "#  Modified:\r\n",
        "#\r\n",
        "#    22 February 2011\r\n",
        "#\r\n",
        "#  Author:\r\n",
        "#\r\n",
        "#    Original MATLAB version by John Burkardt.\r\n",
        "#    PYTHON version by Corrado Chisari\r\n",
        "#\r\n",
        "#  Parameters:\r\n",
        "#\r\n",
        "#    Input, integer M, the spatial dimension.\r\n",
        "#\r\n",
        "#    Input, integer N, the number of points to generate.\r\n",
        "#\r\n",
        "#    Input, integer SKIP, the number of initial points to skip.\r\n",
        "#\r\n",
        "#    Output, real R(M,N), the points.\r\n",
        "#\r\n",
        "\tr=zeros((m,n))\r\n",
        "\tfor j in range (1, n+1):\r\n",
        "\t\tseed = skip + j - 2\r\n",
        "\t\t[ r[0:m,j-1], seed ] = i4_sobol ( m, seed )\r\n",
        "\treturn r\r\n",
        "\r\n",
        "def i4_sobol ( dim_num, seed ):\r\n",
        "\r\n",
        "#*****************************************************************************80\r\n",
        "#\r\n",
        "## I4_SOBOL generates a new quasirandom Sobol vector with each call.\r\n",
        "#\r\n",
        "#  Discussion:\r\n",
        "#\r\n",
        "#    The routine adapts the ideas of Antonov and Saleev.\r\n",
        "#\r\n",
        "#  Licensing:\r\n",
        "#\r\n",
        "#    This code is distributed under the MIT license.\r\n",
        "#\r\n",
        "#  Modified:\r\n",
        "#\r\n",
        "#    22 February 2011\r\n",
        "#\r\n",
        "#  Author:\r\n",
        "#\r\n",
        "#    Original FORTRAN77 version by Bennett Fox.\r\n",
        "#    MATLAB version by John Burkardt.\r\n",
        "#    PYTHON version by Corrado Chisari\r\n",
        "#\r\n",
        "#  Reference:\r\n",
        "#\r\n",
        "#    Antonov, Saleev,\r\n",
        "#    USSR Computational Mathematics and Mathematical Physics,\r\n",
        "#    olume 19, 1980, pages 252 - 256.\r\n",
        "#\r\n",
        "#    Paul Bratley, Bennett Fox,\r\n",
        "#    Algorithm 659:\r\n",
        "#    Implementing Sobol's Quasirandom Sequence Generator,\r\n",
        "#    ACM Transactions on Mathematical Software,\r\n",
        "#    Volume 14, Number 1, pages 88-100, 1988.\r\n",
        "#\r\n",
        "#    Bennett Fox,\r\n",
        "#    Algorithm 647:\r\n",
        "#    Implementation and Relative Efficiency of Quasirandom \r\n",
        "#    Sequence Generators,\r\n",
        "#    ACM Transactions on Mathematical Software,\r\n",
        "#    Volume 12, Number 4, pages 362-376, 1986.\r\n",
        "#\r\n",
        "#    Ilya Sobol,\r\n",
        "#    USSR Computational Mathematics and Mathematical Physics,\r\n",
        "#    Volume 16, pages 236-242, 1977.\r\n",
        "#\r\n",
        "#    Ilya Sobol, Levitan, \r\n",
        "#    The Production of Points Uniformly Distributed in a Multidimensional \r\n",
        "#    Cube (in Russian),\r\n",
        "#    Preprint IPM Akad. Nauk SSSR, \r\n",
        "#    Number 40, Moscow 1976.\r\n",
        "#\r\n",
        "#  Parameters:\r\n",
        "#\r\n",
        "#    Input, integer DIM_NUM, the number of spatial dimensions.\r\n",
        "#    DIM_NUM must satisfy 1 <= DIM_NUM <= 40.\r\n",
        "#\r\n",
        "#    Input/output, integer SEED, the \"seed\" for the sequence.\r\n",
        "#    This is essentially the index in the sequence of the quasirandom\r\n",
        "#    value to be generated.\tOn output, SEED has been set to the\r\n",
        "#    appropriate next value, usually simply SEED+1.\r\n",
        "#    If SEED is less than 0 on input, it is treated as though it were 0.\r\n",
        "#    An input value of 0 requests the first (0-th) element of the sequence.\r\n",
        "#\r\n",
        "#    Output, real QUASI(DIM_NUM), the next quasirandom vector.\r\n",
        "#\r\n",
        "\tglobal atmost\r\n",
        "\tglobal dim_max\r\n",
        "\tglobal dim_num_save\r\n",
        "\tglobal initialized\r\n",
        "\tglobal lastq\r\n",
        "\tglobal log_max\r\n",
        "\tglobal maxcol\r\n",
        "\tglobal poly\r\n",
        "\tglobal recipd\r\n",
        "\tglobal seed_save\r\n",
        "\tglobal v\r\n",
        "\r\n",
        "\tif ( not 'initialized' in globals().keys() ):\r\n",
        "\t\tinitialized = 0\r\n",
        "\t\tdim_num_save = -1\r\n",
        "\r\n",
        "\tif ( not initialized or dim_num != dim_num_save ):\r\n",
        "\t\tinitialized = 1\r\n",
        "\t\tdim_max = 40\r\n",
        "\t\tdim_num_save = -1\r\n",
        "\t\tlog_max = 30\r\n",
        "\t\tseed_save = -1\r\n",
        "#\r\n",
        "#\tInitialize (part of) V.\r\n",
        "#\r\n",
        "\t\tv = zeros((dim_max,log_max))\r\n",
        "\t\tv[0:40,0] = transpose([ \\\r\n",
        "\t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\r\n",
        "\t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\r\n",
        "\t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\r\n",
        "\t\t\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ])\r\n",
        "\r\n",
        "\t\tv[2:40,1] = transpose([ \\\r\n",
        "\t\t\t1, 3, 1, 3, 1, 3, 3, 1, \\\r\n",
        "\t\t\t3, 1, 3, 1, 3, 1, 1, 3, 1, 3, \\\r\n",
        "\t\t\t1, 3, 1, 3, 3, 1, 3, 1, 3, 1, \\\r\n",
        "\t\t\t3, 1, 1, 3, 1, 3, 1, 3, 1, 3 ])\r\n",
        "\r\n",
        "\t\tv[3:40,2] = transpose([ \\\r\n",
        "\t\t\t7, 5, 1, 3, 3, 7, 5, \\\r\n",
        "\t\t\t5, 7, 7, 1, 3, 3, 7, 5, 1, 1, \\\r\n",
        "\t\t\t5, 3, 3, 1, 7, 5, 1, 3, 3, 7, \\\r\n",
        "\t\t\t5, 1, 1, 5, 7, 7, 5, 1, 3, 3 ])\r\n",
        "\r\n",
        "\t\tv[5:40,3] = transpose([ \\\r\n",
        "\t\t\t1, 7, 9,13,11, \\\r\n",
        "\t\t\t1, 3, 7, 9, 5,13,13,11, 3,15, \\\r\n",
        "\t\t\t5, 3,15, 7, 9,13, 9, 1,11, 7, \\\r\n",
        "\t\t\t5,15, 1,15,11, 5, 3, 1, 7, 9 ])\r\n",
        "\t\r\n",
        "\t\tv[7:40,4] = transpose([ \\\r\n",
        "\t\t\t9, 3,27, \\\r\n",
        "\t\t\t15,29,21,23,19,11,25, 7,13,17, \\\r\n",
        "\t\t\t1,25,29, 3,31,11, 5,23,27,19, \\\r\n",
        "\t\t\t21, 5, 1,17,13, 7,15, 9,31, 9 ])\r\n",
        "\r\n",
        "\t\tv[13:40,5] = transpose([ \\\r\n",
        "\t\t\t\t\t\t\t37,33, 7, 5,11,39,63, \\\r\n",
        "\t\t 27,17,15,23,29, 3,21,13,31,25, \\\r\n",
        "\t\t\t9,49,33,19,29,11,19,27,15,25 ])\r\n",
        "\r\n",
        "\t\tv[19:40,6] = transpose([ \\\r\n",
        "\t\t\t13, \\\r\n",
        "\t\t\t33,115, 41, 79, 17, 29,119, 75, 73,105, \\\r\n",
        "\t\t\t7, 59, 65, 21,\t3,113, 61, 89, 45,107 ])\r\n",
        "\r\n",
        "\t\tv[37:40,7] = transpose([ \\\r\n",
        "\t\t\t7, 23, 39 ])\r\n",
        "#\r\n",
        "#\tSet POLY.\r\n",
        "#\r\n",
        "\t\tpoly= [ \\\r\n",
        "\t\t\t1,\t 3,\t 7,\t11,\t13,\t19,\t25,\t37,\t59,\t47, \\\r\n",
        "\t\t\t61,\t55,\t41,\t67,\t97,\t91, 109, 103, 115, 131, \\\r\n",
        "\t\t\t193, 137, 145, 143, 241, 157, 185, 167, 229, 171, \\\r\n",
        "\t\t\t213, 191, 253, 203, 211, 239, 247, 285, 369, 299 ]\r\n",
        "\r\n",
        "\t\tatmost = 2**log_max - 1\r\n",
        "#\r\n",
        "#\tFind the number of bits in ATMOST.\r\n",
        "#\r\n",
        "\t\tmaxcol = i4_bit_hi1 ( atmost )\r\n",
        "#\r\n",
        "#\tInitialize row 1 of V.\r\n",
        "#\r\n",
        "\t\tv[0,0:maxcol] = 1\r\n",
        "\r\n",
        "#\r\n",
        "#\tThings to do only if the dimension changed.\r\n",
        "#\r\n",
        "\tif ( dim_num != dim_num_save ):\r\n",
        "#\r\n",
        "#\tCheck parameters.\r\n",
        "#\r\n",
        "\t\tif ( dim_num < 1 or dim_max < dim_num ):\r\n",
        "\t\t\tprint ( 'I4_SOBOL - Fatal error!' )\r\n",
        "\t\t\tprint ( '\tThe spatial dimension DIM_NUM should satisfy:' )\r\n",
        "\t\t\tprint ( '\t\t1 <= DIM_NUM <= %d'%dim_max )\r\n",
        "\t\t\tprint ( '\tBut this input value is DIM_NUM = %d'%dim_num )\r\n",
        "\t\t\treturn\r\n",
        "\r\n",
        "\t\tdim_num_save = dim_num\r\n",
        "#\r\n",
        "#\tInitialize the remaining rows of V.\r\n",
        "#\r\n",
        "\t\tfor i in range(2 , dim_num+1):\r\n",
        "#\r\n",
        "#\tThe bits of the integer POLY(I) gives the form of polynomial I.\r\n",
        "#\r\n",
        "#\tFind the degree of polynomial I from binary encoding.\r\n",
        "#\r\n",
        "\t\t\tj = poly[i-1]\r\n",
        "\t\t\tm = 0\r\n",
        "\t\t\twhile ( 1 ):\r\n",
        "\t\t\t\tj = math.floor ( j / 2. )\r\n",
        "\t\t\t\tif ( j <= 0 ):\r\n",
        "\t\t\t\t\tbreak\r\n",
        "\t\t\t\tm = m + 1\r\n",
        "#\r\n",
        "#\tExpand this bit pattern to separate components of the logical array INCLUD.\r\n",
        "#\r\n",
        "\t\t\tj = poly[i-1]\r\n",
        "\t\t\tinclud=zeros(m)\r\n",
        "\t\t\tfor k in range(m, 0, -1):\r\n",
        "\t\t\t\tj2 = math.floor ( j / 2. )\r\n",
        "\t\t\t\tinclud[k-1] =  (j != 2 * j2 )\r\n",
        "\t\t\t\tj = j2\r\n",
        "#\r\n",
        "#\tCalculate the remaining elements of row I as explained\r\n",
        "#\tin Bratley and Fox, section 2.\r\n",
        "#\r\n",
        "\t\t\tfor j in range( m+1, maxcol+1 ):\r\n",
        "\t\t\t\tnewv = v[i-1,j-m-1]\r\n",
        "\t\t\t\tl = 1\r\n",
        "\t\t\t\tfor k in range(1, m+1):\r\n",
        "\t\t\t\t\tl = 2 * l\r\n",
        "\t\t\t\t\tif ( includ[k-1] ):\r\n",
        "\t\t\t\t\t\tnewv = bitwise_xor ( int(newv), int(l * v[i-1,j-k-1]) )\r\n",
        "\t\t\t\tv[i-1,j-1] = newv\r\n",
        "#\r\n",
        "#\tMultiply columns of V by appropriate power of 2.\r\n",
        "#\r\n",
        "\t\tl = 1\r\n",
        "\t\tfor j in range( maxcol-1, 0, -1):\r\n",
        "\t\t\tl = 2 * l\r\n",
        "\t\t\tv[0:dim_num,j-1] = v[0:dim_num,j-1] * l\r\n",
        "#\r\n",
        "#\tRECIPD is 1/(common denominator of the elements in V).\r\n",
        "#\r\n",
        "\t\trecipd = 1.0 / ( 2 * l )\r\n",
        "\t\tlastq=zeros(dim_num)\r\n",
        "\r\n",
        "\tseed = int(math.floor ( seed ))\r\n",
        "\r\n",
        "\tif ( seed < 0 ):\r\n",
        "\t\tseed = 0\r\n",
        "\r\n",
        "\tif ( seed == 0 ):\r\n",
        "\t\tl = 1\r\n",
        "\t\tlastq=zeros(dim_num)\r\n",
        "\r\n",
        "\telif ( seed == seed_save + 1 ):\r\n",
        "#\r\n",
        "#\tFind the position of the right-hand zero in SEED.\r\n",
        "#\r\n",
        "\t\tl = i4_bit_lo0 ( seed )\r\n",
        "\r\n",
        "\telif ( seed <= seed_save ):\r\n",
        "\r\n",
        "\t\tseed_save = 0\r\n",
        "\t\tl = 1\r\n",
        "\t\tlastq=zeros(dim_num)\r\n",
        "\r\n",
        "\t\tfor seed_temp in range( int(seed_save), int(seed)):\r\n",
        "\t\t\tl = i4_bit_lo0 ( seed_temp )\r\n",
        "\t\t\tfor i in range(1 , dim_num+1):\r\n",
        "\t\t\t\tlastq[i-1] = bitwise_xor ( int(lastq[i-1]), int(v[i-1,l-1]) )\r\n",
        "\r\n",
        "\t\tl = i4_bit_lo0 ( seed )\r\n",
        "\r\n",
        "\telif ( seed_save + 1 < seed ):\r\n",
        "\r\n",
        "\t\tfor seed_temp in range( int(seed_save + 1), int(seed) ):\r\n",
        "\t\t\tl = i4_bit_lo0 ( seed_temp )\r\n",
        "\t\t\tfor i in range(1, dim_num+1):\r\n",
        "\t\t\t\tlastq[i-1] = bitwise_xor ( int(lastq[i-1]), int(v[i-1,l-1]) )\r\n",
        "\r\n",
        "\t\tl = i4_bit_lo0 ( seed )\r\n",
        "#\r\n",
        "#\tCheck that the user is not calling too many times!\r\n",
        "#\r\n",
        "\tif ( maxcol < l ):\r\n",
        "\t\tprint ( 'I4_SOBOL - Fatal error!' )\r\n",
        "\t\tprint ( '\tToo many calls!' )\r\n",
        "\t\tprint ( '\tMAXCOL = %d\\n'%maxcol )\r\n",
        "\t\tprint ( '\tL =\t\t\t%d\\n'%l )\r\n",
        "\t\treturn\r\n",
        "#\r\n",
        "#\tCalculate the new components of QUASI.\r\n",
        "#\r\n",
        "\tquasi=zeros(dim_num)\r\n",
        "\tfor i in range( 1, dim_num+1):\r\n",
        "\t\tquasi[i-1] = lastq[i-1] * recipd\r\n",
        "\t\tlastq[i-1] = bitwise_xor ( int(lastq[i-1]), int(v[i-1,l-1]) )\r\n",
        "\r\n",
        "\tseed_save = seed\r\n",
        "\tseed = seed + 1\r\n",
        "\r\n",
        "\treturn [ quasi, seed ]\r\n",
        "\r\n",
        "\r\n",
        "def i4_bit_hi1 ( n ) :\r\n",
        "\r\n",
        "#*****************************************************************************80\r\n",
        "#\r\n",
        "## I4_BIT_HI1 returns the position of the high 1 bit base 2 in an I4.\r\n",
        "#\r\n",
        "#  Discussion:\r\n",
        "#\r\n",
        "#    An I4 is an integer ( kind = 4 ) value.\r\n",
        "#\r\n",
        "#  Example:\r\n",
        "#\r\n",
        "#       N    Binary    Hi 1\r\n",
        "#    ----    --------  ----\r\n",
        "#       0           0     0\r\n",
        "#       1           1     1\r\n",
        "#       2          10     2\r\n",
        "#       3          11     2\r\n",
        "#       4         100     3\r\n",
        "#       5         101     3\r\n",
        "#       6         110     3\r\n",
        "#       7         111     3\r\n",
        "#       8        1000     4\r\n",
        "#       9        1001     4\r\n",
        "#      10        1010     4\r\n",
        "#      11        1011     4\r\n",
        "#      12        1100     4\r\n",
        "#      13        1101     4\r\n",
        "#      14        1110     4\r\n",
        "#      15        1111     4\r\n",
        "#      16       10000     5\r\n",
        "#      17       10001     5\r\n",
        "#    1023  1111111111    10\r\n",
        "#    1024 10000000000    11\r\n",
        "#    1025 10000000001    11\r\n",
        "#\r\n",
        "#  Licensing:\r\n",
        "#\r\n",
        "#    This code is distributed under the GNU LGPL license.\r\n",
        "#\r\n",
        "#  Modified:\r\n",
        "#\r\n",
        "#    26 October 2014\r\n",
        "#\r\n",
        "#  Author:\r\n",
        "#\r\n",
        "#    John Burkardt\r\n",
        "#\r\n",
        "#  Parameters:\r\n",
        "#\r\n",
        "#    Input, integer N, the integer to be measured.\r\n",
        "#    N should be nonnegative.  If N is nonpositive, the function\r\n",
        "#    will always be 0.\r\n",
        "#\r\n",
        "#    Output, integer BIT, the position of the highest bit.\r\n",
        "#\r\n",
        "  i = n\r\n",
        "  bit = 0\r\n",
        "\r\n",
        "  while ( True ):\r\n",
        "\r\n",
        "    if ( i <= 0 ):\r\n",
        "      break\r\n",
        "\r\n",
        "    bit = bit + 1\r\n",
        "    i = i // 2\r\n",
        "\r\n",
        "  return bit\r\n",
        "\r\n",
        "def i4_bit_lo0 ( n ):\r\n",
        "\r\n",
        "#*****************************************************************************80\r\n",
        "#\r\n",
        "## I4_BIT_LO0 returns the position of the low 0 bit base 2 in an I4.\r\n",
        "#\r\n",
        "#  Discussion:\r\n",
        "#\r\n",
        "#    An I4 is an integer ( kind = 4 ) value.\r\n",
        "#\r\n",
        "#  Example:\r\n",
        "#\r\n",
        "#       N    Binary    Lo 0\r\n",
        "#    ----    --------  ----\r\n",
        "#       0           0     1\r\n",
        "#       1           1     2\r\n",
        "#       2          10     1\r\n",
        "#       3          11     3\r\n",
        "#       4         100     1\r\n",
        "#       5         101     2\r\n",
        "#       6         110     1\r\n",
        "#       7         111     4\r\n",
        "#       8        1000     1\r\n",
        "#       9        1001     2\r\n",
        "#      10        1010     1\r\n",
        "#      11        1011     3\r\n",
        "#      12        1100     1\r\n",
        "#      13        1101     2\r\n",
        "#      14        1110     1\r\n",
        "#      15        1111     5\r\n",
        "#      16       10000     1\r\n",
        "#      17       10001     2\r\n",
        "#    1023  1111111111    11\r\n",
        "#    1024 10000000000     1\r\n",
        "#    1025 10000000001     2\r\n",
        "#\r\n",
        "#  Licensing:\r\n",
        "#\r\n",
        "#    This code is distributed under the GNU LGPL license.\r\n",
        "#\r\n",
        "#  Modified:\r\n",
        "#\r\n",
        "#    08 February 2018\r\n",
        "#\r\n",
        "#  Author:\r\n",
        "#\r\n",
        "#    John Burkardt\r\n",
        "#\r\n",
        "#  Parameters:\r\n",
        "#\r\n",
        "#    Input, integer N, the integer to be measured.\r\n",
        "#    N should be nonnegative.\r\n",
        "#\r\n",
        "#    Output, integer BIT, the position of the low 1 bit.\r\n",
        "#\r\n",
        "  bit = 0\r\n",
        "  i = n\r\n",
        "\r\n",
        "  while ( True ):\r\n",
        "\r\n",
        "    bit = bit + 1\r\n",
        "    i2 = i // 2\r\n",
        "\r\n",
        "    if ( i == 2 * i2 ):\r\n",
        "      break\r\n",
        "\r\n",
        "    i = i2\r\n",
        "\r\n",
        "  return bit\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kxkz4ULPyUqT"
      },
      "source": [
        "**Functions**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SZTQaKKyyT0c"
      },
      "source": [
        "def sobol_sample(x_lb, x_ub, n_s): \r\n",
        "  \"generates n_s pseudorandom floats between x_lb and x_ub as part of the sobol sequence\"\r\n",
        "  x1_lb, x2_lb = x_lb\r\n",
        "  x1_ub, x2_ub = x_ub\r\n",
        "  x_sample = i4_sobol_generate(2, n_s, 1);\r\n",
        "\r\n",
        "  x_sample[0] = x_sample[0] * (x1_ub - x1_lb) + x1_lb\r\n",
        "  x_sample[1] = x_sample[1] * (x2_ub - x2_lb) + x2_lb\r\n",
        "\r\n",
        "  return x_sample\r\n",
        "\r\n",
        "#quadratic proxy/surrogate functions\r\n",
        "def f_approx(x, coeffs): \r\n",
        "  \"quadratic proxy function to approximate the model function\"\r\n",
        "  a,b,c,d,e = coeffs\r\n",
        "  f_approx = a*x[0]**2 + b*x[1]**2 + c*x[0] + d*x[1] + e  \r\n",
        "  return (f_approx)\r\n",
        "\r\n",
        "def phi_f(x, coeffs):\r\n",
        "  \"quadratic proxy function to approximate epsilon f, the error between the plant and the model\"\r\n",
        "  a,b,c,d,e = coeffs\r\n",
        "  phi_f = a*x[0]**2 + b*x[1]**2 + c*x[0] + d*x[1] + e  \r\n",
        "  return (phi_f) \r\n",
        "\r\n",
        "#trust region functions\r\n",
        "def trust_constraint(x):\r\n",
        "  \"constraint for trust region to help find minima subject to bound length\"\r\n",
        "  return (delta_k - np.linalg.norm(x-x_k))\r\n",
        "\r\n",
        "def adjust_trust(delta_k,x_k,x_new,coeffs):\r\n",
        "  \"adjusts the trust region based on nocedal & wright's algorithm\"\r\n",
        "  #note- you may decide to remove np.linalg.norm(p_k)==delta_k; produces better results?\r\n",
        "  p_k = x_new - x_k\r\n",
        "  rho_k, calc1, calc2 = calc_rho_k(p_k.T, x_k.T,coeffs)\r\n",
        "  if calc2<calc1:\r\n",
        "      if (rho_k<0.25):\r\n",
        "          delta_k=0.25*delta_k\r\n",
        "      else:\r\n",
        "        if (rho_k>0.75):\r\n",
        "            delta_k=min(2*delta_k, delta_upper)\r\n",
        "        else:\r\n",
        "            delta_k=delta_k*0.8\r\n",
        "  else:\r\n",
        "    x_new = x_k\r\n",
        "\r\n",
        "  x_k = x_new\r\n",
        "  return delta_k, x_k, x_new\r\n",
        "\r\n",
        "def calc_rho_k(p_k, x_k, coeffs):\r\n",
        "  \"calculates the ratio between the actual reduction and the predicted reduction.\"\r\n",
        "  #input p_k is the step size, x_k is the value at the current iterate\r\n",
        "  #coeffs will either just be model_coeffs or model+ef\r\n",
        "  #Note: x_k + p_k = x_new\r\n",
        "  calc1= obj_system(x_k)\r\n",
        "  calc2 = obj_system(x_k+p_k)\r\n",
        "  numerator = calc1-calc2\r\n",
        "  calc3 =f_approx(x_k, coeffs)\r\n",
        "  calc4 =f_approx(x_k+p_k, coeffs)\r\n",
        "  denominator = calc3-calc4\r\n",
        "  rho_k = numerator/denominator\r\n",
        "  return (rho_k, calc1, calc2)\r\n",
        "\r\n",
        "#least-squares approximations\r\n",
        "def lse_objective(coeffs, f_sample, x_sample): \r\n",
        "  \"calculates least squares error between the objective function and estimate polynomial (f_approx)\"\r\n",
        "  mysum = sum((f_sample - f_approx(x_sample, coeffs))**2)\r\n",
        "  return (mysum)\r\n",
        "\r\n",
        "def lse_ef(coeffs, e_f, x_sample): \r\n",
        "  \"calculates least squares error between modifier ef and estimate polynomial (phi_f)\"\r\n",
        "  mysum = sum((e_f - phi_f(x_sample.T, coeffs))**2)\r\n",
        "  return (mysum)\r\n",
        "\r\n",
        "def generate_bounds(dimen):\r\n",
        "  \"generates bounds to ensure that all of the quadratic terms are positive, giving a convex optimisation problem\"\r\n",
        "  bnds1 = tuple((0, None) for i in range(1, dimen))\r\n",
        "  bnds2 = tuple((None, None) for j in range(0, 2*dimen - (dimen)))\r\n",
        "  bnds = bnds1+bnds2;\r\n",
        "  return(bnds)\r\n",
        "\r\n",
        "#rto functions\r\n",
        "def epsilon_f(x_k, delta_k, model_coeffs):\r\n",
        "  \"finds the difference between the plant value and the model value for the objective function\"\r\n",
        "  sample=i4_sobol_generate(2, 10, 123);\r\n",
        "  ef_u1=sample[0]*delta_k*1.5+(x_k[0]-(delta_k*1.5)/2)\r\n",
        "  ef_u2=sample[1]*delta_k*1.5+(x_k[1]-(delta_k*1.5)/2)\r\n",
        "  ef_sample= np.vstack((ef_u1, ef_u2));\r\n",
        "  f_sample=np.zeros(ef_sample.shape[0])\r\n",
        "  for i in range(ef_sample.shape[0]):\r\n",
        "    f_sample = obj_system(ef_sample[:, i]);\r\n",
        "  e_f=np.array(f_sample)-f_approx(ef_sample, model_coeffs)\r\n",
        "  return(ef_sample, e_f)\r\n",
        "\r\n",
        "plant = WO_system()\r\n",
        "obj_system = plant.WO_obj_sys_ca"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aUhaH7US8wAS"
      },
      "source": [
        "**Variable Definition**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tsx_6i1A80UN"
      },
      "source": [
        "x_ub = [7, 100] #upper bound on x1 and x2\r\n",
        "x_lb = [4, 70] #lower bound on x1 and x2\r\n",
        "\r\n",
        "n_s = 200; #number of samples per iteration\r\n",
        "n_i = 100; #number of iterations\r\n",
        "\r\n",
        "model_coeffs = [0, 0, 0, 0, 0]; #initial coefficients for the model function\r\n",
        "ef_coeffs = [0, 0, 0, 0, 0]; #intial coefficients for e_f "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i7DT8qso9zOp"
      },
      "source": [
        "**Real Time Optimisation**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9emviDvt_ebZ"
      },
      "source": [
        "Notes: rows = dimensions, columns = number of samples"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "paYBqoHu97pp"
      },
      "source": [
        "#step 1: import the system\r\n",
        "plant = WO_system()\r\n",
        "obj_system = plant.WO_obj_sys_ca\r\n",
        "obj_system_noiseless = plant.WO_obj_sys_ca_noise_less"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7kIAci1G-D7H"
      },
      "source": [
        "#step 2a: generate sobol sequence for sampling\r\n",
        "x_sample = sobol_sample(x_lb, x_ub, n_s)\r\n",
        "\r\n",
        "#step 2b: and find corresponding plant values\r\n",
        "f_sample = np.zeros(x_sample.shape[1]);\r\n",
        "for i in range(x_sample.shape[1]):\r\n",
        "  f_sample[i] = obj_system(x_sample[:,i]); #finds the plant values based on the random sample"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jw_GTdZ-DyL8",
        "outputId": "a4a6e07f-9b0c-4a9c-ab62-6d0cdbdd12e1"
      },
      "source": [
        "#step 3: find the initial model coefficients by minimising least squares error between the real and model function\r\n",
        "bnds = generate_bounds(3)\r\n",
        "for i in range(10):\r\n",
        "  model_coeffs=minimize(lse_objective, model_coeffs, args=(f_sample, x_sample), method = 'SLSQP', bounds=bnds).x\r\n",
        "print('Initial model coefficients are: ' + str(model_coeffs))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Initial model coefficients are: [0. 0. 0. 0. 0.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T_oRAZVkU3es"
      },
      "source": [
        "#step 4: implement trust region approach as a constraint\r\n",
        "trustreg = {'type':'ineq', 'fun': trust_constraint}\r\n",
        "constr = [trustreg]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TJqinpRSE_AU"
      },
      "source": [
        "#step 5: initialise variables for real time optimisation\r\n",
        "x_k=np.array([6.9, 90]) #starting point, and then x_k represents subsequent points in the iteration\r\n",
        "x_new_plot = x_k; #storing values of x_k for easy plotting later\r\n",
        "\r\n",
        "delta_upper = 10; #bound on step size for trust region, delta-hat\r\n",
        "delta_k = 0.1; #initial guess for delta\r\n",
        "delta_plot = delta_k; #storing values of delta for easy plotting later\r\n",
        "\r\n",
        "e_f = np.array([None]) #initialising array for e_f, which represents error between plant and model\r\n",
        "e_f = [e_f] #giving e_f the correct dimensions\r\n",
        "ef_sample=np.array([None, None]) #ef_sample is the sobol sample taken around the point to find e_f\r\n",
        "\r\n",
        "obj_fun_plot = 0; #plotting for the objective function"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CXFbbz3iRudF",
        "outputId": "dc65192d-0790-4799-f6d0-6d83f975d641"
      },
      "source": [
        "#step 6: real time optimisation\r\n",
        "#then, for iteration 7+, add e_f to the coefficients to get the modified quadratic\r\n",
        "for i in range(n_i):\r\n",
        "  if i<=5: #for the first 6 iterations (we require 6 to create a unique quadratic approximation), do not use error correction term\r\n",
        "    ef_sample_i, ef_i = epsilon_f(x_k, delta_k, model_coeffs) #ef_sample_i and ef_i store just the values for the current iteration\r\n",
        "    e_f = np.column_stack((e_f, np.array(ef_i)))\r\n",
        "    ef_sample = np.vstack((ef_sample, ef_sample_i.T))\r\n",
        "\r\n",
        "    #optimising the function\r\n",
        "    opti = minimize(partial(f_approx, coeffs=(model_coeffs)), x0=x_k, method = 'SLSQP', constraints = trustreg, options={'disp': True})\r\n",
        "    x_new = opti.x\r\n",
        "\r\n",
        "    #readjusting the trust region based on the new optimum\r\n",
        "    delta_k, x_k, x_new = adjust_trust(delta_k, x_k, x_new, model_coeffs)\r\n",
        "\r\n",
        "  if i == 5: #on the 6th iteration, calculate the quadratic for e_f for the first time\r\n",
        "    e_f=np.delete(e_f, 0) #removing the row used to initialise the array\r\n",
        "    e_f = [e_f]\r\n",
        "    ef_sample=np.delete(ef_sample, 0, 0) #removing the row used to initialise the array\r\n",
        "    ef_coeffs = minimize(lse_ef, ef_coeffs, args=(e_f, ef_sample), method = 'SLSQP', bounds=bnds).x\r\n",
        "  \r\n",
        "  if i>=6: #on the 7th iteration, start using the error correction term to estimate\r\n",
        "    ef_sample_i, ef_i=epsilon_f(x_k, delta_k, (model_coeffs+ef_coeffs)) #ef_sample_i and ef_i store just the values for the current iteration\r\n",
        "    e_f=np.column_stack((e_f, np.array(ef_i)))\r\n",
        "    ef_sample=np.vstack((ef_sample, ef_sample_i.T))\r\n",
        "\r\n",
        "    opti = minimize(partial(f_approx, coeffs=(model_coeffs+ef_coeffs)), x0=x_k, method = 'SLSQP', constraints = trustreg, options={'disp': True})\r\n",
        "    x_new = opti.x\r\n",
        "    e_f=e_f[0, 10:]\r\n",
        "    e_f=np.array([e_f])\r\n",
        "    ef_sample=ef_sample[10:]\r\n",
        "    ef_coeffs = minimize(lse_ef, ef_coeffs, args=(e_f, ef_sample), method = 'SLSQP', bounds=bnds).x\r\n",
        "    \r\n",
        "    #readjusting the trust region based on the new optimum\r\n",
        "    delta_k, x_k, x_new = adjust_trust(delta_k, x_k, x_new, model_coeffs+ef_coeffs)\r\n",
        "\r\n",
        "  #adding the points to an array for easy plotting later on\r\n",
        "  x_new_plot = np.vstack((x_new_plot, x_k));\r\n",
        "  delta_plot = np.vstack((delta_plot, delta_k));\r\n",
        "  if(opti.success==1):\r\n",
        "    obj_fun_plot=np.vstack((obj_fun_plot, opti.fun));\r\n",
        "\r\n",
        "print('e_f coeffs', ef_coeffs)\r\n",
        "print('model coeffs', model_coeffs)\r\n",
        "print('added', ef_coeffs+model_coeffs)\r\n",
        "print('Optimum points are: '+ str(x_k))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 0.0\n",
            "            Iterations: 1\n",
            "            Function evaluations: 4\n",
            "            Gradient evaluations: 1\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 10.495864322149096\n",
            "            Iterations: 3\n",
            "            Function evaluations: 12\n",
            "            Gradient evaluations: 3\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 8.349663109500224\n",
            "            Iterations: 3\n",
            "            Function evaluations: 12\n",
            "            Gradient evaluations: 3\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: 4.057260672869735\n",
            "            Iterations: 3\n",
            "            Function evaluations: 12\n",
            "            Gradient evaluations: 3\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -108.50679912012544\n",
            "            Iterations: 7\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -61.02388551718701\n",
            "            Iterations: 6\n",
            "            Function evaluations: 25\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -62.63632386629283\n",
            "            Iterations: 6\n",
            "            Function evaluations: 24\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -35.817976282438394\n",
            "            Iterations: 7\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -35.817976282438394\n",
            "            Iterations: 7\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -35.817976282438394\n",
            "            Iterations: 7\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.05291287523323\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.05291287523323\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.05291287523323\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.348280155716566\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.92298538952673\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -37.92298538952673\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -38.36737260626251\n",
            "            Iterations: 8\n",
            "            Function evaluations: 35\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -38.47633487845633\n",
            "            Iterations: 7\n",
            "            Function evaluations: 33\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -38.47633487845633\n",
            "            Iterations: 7\n",
            "            Function evaluations: 33\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -50.10800782540355\n",
            "            Iterations: 6\n",
            "            Function evaluations: 28\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.31270977109125\n",
            "            Iterations: 8\n",
            "            Function evaluations: 38\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.19425636572487\n",
            "            Iterations: 9\n",
            "            Function evaluations: 43\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.766678738635164\n",
            "            Iterations: 9\n",
            "            Function evaluations: 45\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.224544278935355\n",
            "            Iterations: 12\n",
            "            Function evaluations: 57\n",
            "            Gradient evaluations: 12\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -47.0683163116355\n",
            "            Iterations: 12\n",
            "            Function evaluations: 60\n",
            "            Gradient evaluations: 11\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.11856739368159\n",
            "            Iterations: 8\n",
            "            Function evaluations: 40\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.11856739368159\n",
            "            Iterations: 8\n",
            "            Function evaluations: 40\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.754745838527015\n",
            "            Iterations: 9\n",
            "            Function evaluations: 42\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.754745838527015\n",
            "            Iterations: 9\n",
            "            Function evaluations: 42\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.754745838527015\n",
            "            Iterations: 9\n",
            "            Function evaluations: 42\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.754745838527015\n",
            "            Iterations: 9\n",
            "            Function evaluations: 42\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.754745838527015\n",
            "            Iterations: 9\n",
            "            Function evaluations: 42\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.025966143142796\n",
            "            Iterations: 8\n",
            "            Function evaluations: 38\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.52003500472347\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.771239506048005\n",
            "            Iterations: 7\n",
            "            Function evaluations: 33\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.0868093957597\n",
            "            Iterations: 8\n",
            "            Function evaluations: 39\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.373196096003085\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.86111832271308\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.54300025438533\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.12139802856109\n",
            "            Iterations: 9\n",
            "            Function evaluations: 41\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.713081490568584\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.025441369089094\n",
            "            Iterations: 6\n",
            "            Function evaluations: 28\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.462329590836816\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.061666335969676\n",
            "            Iterations: 8\n",
            "            Function evaluations: 38\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.33211897793717\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.06028258141305\n",
            "            Iterations: 6\n",
            "            Function evaluations: 25\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.9180155050899\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.136486416782645\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.10997156778649\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.05786313410408\n",
            "            Iterations: 5\n",
            "            Function evaluations: 22\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.19030324614687\n",
            "            Iterations: 6\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.04321760704261\n",
            "            Iterations: 5\n",
            "            Function evaluations: 23\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.16961623598854\n",
            "            Iterations: 5\n",
            "            Function evaluations: 23\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.885494274022676\n",
            "            Iterations: 8\n",
            "            Function evaluations: 38\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.108201457488576\n",
            "            Iterations: 5\n",
            "            Function evaluations: 24\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.17727996997746\n",
            "            Iterations: 5\n",
            "            Function evaluations: 22\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.95589028538052\n",
            "            Iterations: 8\n",
            "            Function evaluations: 38\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.452330012060884\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.659776409383085\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.576564279611375\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.49386808028885\n",
            "            Iterations: 6\n",
            "            Function evaluations: 28\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.247683508027876\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.395271693822\n",
            "            Iterations: 5\n",
            "            Function evaluations: 23\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.542844270757996\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.346133588632256\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -42.97806894678706\n",
            "            Iterations: 6\n",
            "            Function evaluations: 28\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.024693161027244\n",
            "            Iterations: 6\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.21361254625663\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.41716798696143\n",
            "            Iterations: 6\n",
            "            Function evaluations: 29\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.91061443856688\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.56338662882263\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.15212973403868\n",
            "            Iterations: 6\n",
            "            Function evaluations: 26\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.27241803495872\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.40450520986451\n",
            "            Iterations: 9\n",
            "            Function evaluations: 41\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.37893710823937\n",
            "            Iterations: 5\n",
            "            Function evaluations: 23\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.29084415770103\n",
            "            Iterations: 7\n",
            "            Function evaluations: 31\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -52.03368406270147\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -40.615378749961565\n",
            "            Iterations: 8\n",
            "            Function evaluations: 35\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.556823250636626\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.79937192772195\n",
            "            Iterations: 9\n",
            "            Function evaluations: 40\n",
            "            Gradient evaluations: 9\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.545905098224466\n",
            "            Iterations: 8\n",
            "            Function evaluations: 36\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.834049062558734\n",
            "            Iterations: 8\n",
            "            Function evaluations: 35\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.022231503336116\n",
            "            Iterations: 7\n",
            "            Function evaluations: 33\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -45.50760334681854\n",
            "            Iterations: 7\n",
            "            Function evaluations: 32\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.91489877453387\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.51148384653152\n",
            "            Iterations: 7\n",
            "            Function evaluations: 30\n",
            "            Gradient evaluations: 7\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -43.932092336164715\n",
            "            Iterations: 8\n",
            "            Function evaluations: 34\n",
            "            Gradient evaluations: 8\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.04566736594916\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.24816340954476\n",
            "            Iterations: 6\n",
            "            Function evaluations: 25\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.55826512974454\n",
            "            Iterations: 5\n",
            "            Function evaluations: 22\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.03022458506166\n",
            "            Iterations: 6\n",
            "            Function evaluations: 27\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -46.1096024589242\n",
            "            Iterations: 6\n",
            "            Function evaluations: 24\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.51686347749728\n",
            "            Iterations: 5\n",
            "            Function evaluations: 21\n",
            "            Gradient evaluations: 5\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.31605739388137\n",
            "            Iterations: 6\n",
            "            Function evaluations: 24\n",
            "            Gradient evaluations: 6\n",
            "Optimization terminated successfully.    (Exit mode 0)\n",
            "            Current function value: -44.11572292702917\n",
            "            Iterations: 5\n",
            "            Function evaluations: 20\n",
            "            Gradient evaluations: 5\n",
            "e_f coeffs [ 2.56037310e-01  8.12477223e-18 -2.24297057e+00 -4.96060277e-01\n",
            "  4.46331876e+00]\n",
            "model coeffs [0. 0. 0. 0. 0.]\n",
            "added [ 2.56037310e-01  8.12477223e-18 -2.24297057e+00 -4.96060277e-01\n",
            "  4.46331876e+00]\n",
            "Optimum points are: [ 4.30768369 87.66739549]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4u_Lx1MvtRvK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "a20e77ea-62d0-4f26-cc54-40149a1c1d4f"
      },
      "source": [
        "print('Optimum points are: '+ str(x_k))\r\n",
        "\r\n",
        "#plotting f_approx\r\n",
        "# setting up plot\r\n",
        "x_1      = np.linspace(4, 7, n_s)         \r\n",
        "x_2      = np.linspace(70, 100, n_s)\r\n",
        "x        = [[x,y] for x in x_1 for y in x_2]\r\n",
        "x        = np.array(x)\r\n",
        "x        = x.T\r\n",
        "plt = matplotlib.pyplot\r\n",
        "fig = plt.figure()\r\n",
        "# Contour plot\r\n",
        "# f_copy = obj_system(x).reshape((n_s,n_s))\r\n",
        "\r\n",
        "plot_sample = np.zeros(x.shape[1]);\r\n",
        "for i in range(x.shape[1]):\r\n",
        "  plot_sample[i] = obj_system_noiseless(x[:,i]);\r\n",
        "\r\n",
        "f_copy = plot_sample.reshape((n_s, n_s), order=\"F\")\r\n",
        "\r\n",
        "# plotting objective\r\n",
        "def simplefunc_plot(x, model_coeffs):\r\n",
        "    return model_coeffs[0]*x[0,:]**2 + model_coeffs[1]*x[1,:]**2 + model_coeffs[2]*x[0,:]+ model_coeffs[3]*x[1,:] +model_coeffs[4] # (CHANGE MANUALLY)\r\n",
        "f = simplefunc_plot(x,model_coeffs+ef_coeffs)\r\n",
        "\r\n",
        "\r\n",
        "fig, ax  = plt.subplots(figsize=(15,10))\r\n",
        "CS       = ax.contour(x_1, x_2, (f_copy), 15)\r\n",
        "ax.plot(x_sample[0,:], x_sample[1,:], 'ko', markersize=1)\r\n",
        "#ax.plot(g11x2Simple_plot, x_2, 'k')\r\n",
        "ax.plot(x_new_plot[:,0], x_new_plot[:,1], 'ko-', markersize=5)\r\n",
        "\r\n",
        "for i in range(n_i - 1):\r\n",
        "  c = plt.Circle((x_new_plot[i, :]), delta_plot[i], color='r', fill=False)\r\n",
        "  ax.add_artist(c)\r\n",
        "\r\n",
        "axes = plt.gca()\r\n",
        "axes.set_xlim([4,7])\r\n",
        "axes.set_ylim([70,100])\r\n",
        "\r\n",
        "plt.show()\r\n",
        "obj_fun_plot = np.delete(obj_fun_plot, (0), axis=0)\r\n",
        "plt.plot(obj_fun_plot)\r\n",
        "plt.ylabel('Objective Function')\r\n",
        "plt.xlabel('Iteration Number')\r\n",
        "plt.show()\r\n",
        "\r\n",
        "plt.plot(delta_plot)\r\n",
        "plt.ylabel('Trust Region Size')\r\n",
        "plt.xlabel('Iteration Number')\r\n",
        "plt.show()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Optimum points are: [ 4.30768369 87.66739549]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
